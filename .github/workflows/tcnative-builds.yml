name: tcnative build

# 调整 action 规则
on:
  push:
    tags: [ "*" ]
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.sh'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.sh'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  before_build:
    runs-on: [ ubuntu-latest ]
    outputs:
      TC_VERSION1: ${{ steps.get.outputs.TC_VERSION1 }}
      TC_VERSION2: ${{ steps.get.outputs.TC_VERSION2 }}
    # https://docs.github.com/zh/actions/writing-workflows/choosing-what-your-workflow-does/passing-information-between-jobs#%E7%A4%BA%E4%BE%8B%E5%AE%9A%E4%B9%89%E4%BD%9C%E4%B8%9A%E7%9A%84%E8%BE%93%E5%87%BA  
    steps:
      - name: Get version
        id: get
        run: |
          set -xe
          curl -sLO https://github.com/indiff/tomcat-native/raw/refs/heads/main.nossl/native/os/win32/libtcnative.rc
          export version1=$(grep -oP '#define TCN_VERSION\s+"\K[\d.]+' libtcnative.rc | head -1)
          rm -f libtcnative.rc
          curl -sLO https://github.com/indiff/tomcat-native/raw/refs/heads/1.3.x.nossl/native/os/win32/libtcnative.rc
          export version2=$(grep -oP '#define TCN_VERSION\s+"\K[\d.]+' libtcnative.rc | head -1)
          echo "TC_VERSION1=${version1}" >> "$GITHUB_OUTPUT"
          echo "TC_VERSION2=${version2}" >> "$GITHUB_OUTPUT"

  build-in-centos7:
    needs: before_build
    strategy:
      matrix:
        os: [ubuntu-latest]
        apr-config: [ "--enable-static --disable-ipv6 --with-odbc=no" ]
        openssl-config: [ "--strict-warnings no-threads no-shared no-tests enable-fips no-thread-pool no-quic" ]
        tc_branches: [ "main.nossl", "1.3.x.nossl"]
      fail-fast: false
        
    name: "tcnative.so ${{matrix.tc_branches}} ${{ matrix.arch }} build in centos7 "
    runs-on: ${{ matrix.os }}

    steps:
      - name: Create build script
        run: |
          set -xe
          cat << 'EOF' > build.sh
          #!/bin/bash
          set -xe
          echo 'LANG=zh_CN.UTF-8' >> /etc/environment
          echo 'LANGUAGE=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_ALL=zh_CN.UTF-8' >> /etc/environment
          echo 'LC_CTYPE=zh_CN.UTF-8' >> /etc/environment
          curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo
          curl -o /etc/yum.repos.d/epel.repo https://mirrors.aliyun.com/repo/epel-7.repo
          yum clean all
          yum makecache
          yum install -y epel-release
          ls -lh /etc/yum.repos.d/

          echo "[buildlogs-cdn-centos-x86_64]" > /etc/yum.repos.d/centos7-devtoolset-12.repo
          echo "name=devtoolset-12" >> /etc/yum.repos.d/centos7-devtoolset-12.repo
          echo "baseurl=https://buildlogs.cdn.centos.org/c7-devtoolset-12.x86_64" >> /etc/yum.repos.d/centos7-devtoolset-12.repo
          echo "gpgcheck=0" >> /etc/yum.repos.d/centos7-devtoolset-12.repo
          echo "enabled=1" >> /etc/yum.repos.d/centos7-devtoolset-12.repo
          yum -y update
          yum -y install devtoolset-12 --nogpgcheck
          scl enable devtoolset-12 bash
          source /opt/rh/devtoolset-12/enable
          gcc -v
          make -v

          yum -y install tzdata
          ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime
          echo 'Asia/Shanghai' > /etc/timezone
          yum update -y
          yum install -y gcc sudo zlib-devel make git wget sed zip systemd autoconf automake libtool java-1.8.0-openjdk-devel.x86_64 pkgconfig expat-devel
          yum install -y perl-Test-Simple perl-FindBin perl-IPC-Cmd perl-Text-Template perl-File-Compare perl-File-Copy perl-Data-Dumper perl-Digest-SHA
          git clone --depth 1 https://github.com/indiff/apr.git /opt/apr
          cd /opt/apr
          ./buildconf
          CC="gcc -m64" ./configure --prefix=/usr/local/apr ${{ matrix.apr-config }}
          make -j$(nproc)
          make install


          git clone --depth 1 https://github.com/openssl/openssl.git /opt/openssl
          cd /opt/openssl
          mkdir _build
          cd _build
          perl ../Configure --banner=Configured --prefix=/usr/local/openssl ${{ matrix.openssl-config }}
          perl configdata.pm --dump
          make -j$(nproc)
          make install
          # 配置动态库路径
          echo "/usr/local/openssl/lib64" | sudo tee /etc/ld.so.conf.d/openssl.conf
          sudo ldconfig

          git clone -b ${{matrix.tc_branches}} --depth 1 https://github.com/indiff/tomcat-native.git /opt/tcnative
          cd /opt/tcnative/native
          ./buildconf --with-apr=/opt/apr \
                      --with-ssl=/usr/local/openssl
          export JAVA_HOME=$(readlink -f $(which java) | sed 's|/jre/bin/java||')
          mkdir -p /workspace/tcnative
          ./configure --with-apr=/usr/local/apr/bin/apr-2-config \
            --with-java-home=$JAVA_HOME \
            --with-ssl=/usr/local/openssl \
            --prefix=/workspace/tcnative
            
          make -j$(nproc)
          make install
          echo $(cut -d- -f2 <<<$(rpm -q glibc)) >> /workspace/glibc_version.txt
          EOF
          chmod +x build.sh
          

      - name: Build tc in Docker
        run: |
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          docker run --cpus="$(nproc --all)" -u root --rm -v ${{github.workspace}}:/workspace -w /workspace centos:7 /bin/bash -c "/workspace/build.sh"
          export build_timestamp="$(date +'%Y%m%d_%H%M')"
          export glib_version="$(cat glibc_version.txt)"
          # echo "BUILD_VERSION_TIMESTAMP=${{ needs.before_build.outputs.TC_VERSION }}_${build_timestamp}_glibc${glib_version}" >> $GITHUB_ENV
          echo "BUILD_VERSION_TIMESTAMP=${{matrix.tc_branches}}_${build_timestamp}_glibc${glib_version}" >> $GITHUB_ENV
          tree ${{github.workspace}}
          

      - name: Upload tc package
        uses: actions/upload-artifact@v4
        with:
          name: tcnative-centos7-${{ env.BUILD_VERSION_TIMESTAMP }}
          retention-days: 5
          compression-level: 9
          include-hidden-files: true
          path: |
            ${{github.workspace}}/tcnative/

  build-in-windows:
    needs: before_build
    strategy:
      matrix:
        os: [windows-latest]
        build-type: [Release]   # Debug, Release
        generator: [ "Visual Studio 17 2022" ]
        arch: [ "x64" ] # "Win32", "x64"
        toolset: [ "v143" ]  # "v143", "v142"
        test-static: [ "OFF" ]  # "ON", "OFF"
        openssl-config: [ "no-threads no-shared no-tests enable-fips no-thread-pool no-quic" ]
        tc_branches: [ "main.nossl", "1.3.x.nossl"]
        triplet: [ x64-windows ]
      fail-fast: false
    
    name: "tcnative.dll ${{matrix.tc_branches}} ${{ matrix.arch }} build in ${{ matrix.os }} "
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: win64
        
    - uses: ilammy/setup-nasm@v1
      with:
        platform: win64
    - name: Build Apr static library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        if ("${{ matrix.tc_branches }}" -eq "1.3.x.nossl" ) {
            git clone --depth 1 -b 1.8.x https://github.com/indiff/apr.git ${{github.workspace}}\apr
        } else {
            git clone --depth 1 https://github.com/indiff/apr.git ${{github.workspace}}\apr
        }
        
        cd ${{github.workspace}}\apr
        # cmake -B build -DCMAKE_INSTALL_PREFIX=c:\apr -DAPR_INSTALL_INCLUDE_DIR=include  -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPR_BUILD_SHARED=ON -DAPR_BUILD_STATIC=ON  -DTEST_STATIC_LIBS=${{ matrix.test-static }} -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -T ${{ matrix.toolset }}
        # call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
        # cmake -B build -DCMAKE_INSTALL_PREFIX=c:\apr -DAPR_INSTALL_INCLUDE_DIR=include  -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPU_HAVE_SQLITE3=OFF -DAPU_HAVE_ODBC=OFF -DBUILD_SHARED_LIBS=ON -DAPR_MODULAR_DSO=ON -DAPR_INSTALL_PRIVATE_H=ON -DTEST_STATIC_LIBS=${{ matrix.test-static }} -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -T ${{ matrix.toolset }}
        cmake -B build -DCMAKE_INSTALL_PREFIX=c:\apr -DINSTALL_PDB=OFF -DAPR_INSTALL_INCLUDE_DIR=include  -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPU_HAVE_SQLITE3=OFF -DAPU_HAVE_ODBC=OFF -DBUILD_SHARED_LIBS=ON -DAPR_MODULAR_DSO=ON -DAPR_INSTALL_PRIVATE_H=ON -DTEST_STATIC_LIBS=${{ matrix.test-static }} -DVCPKG_TARGET_TRIPLET=x64-window -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -G "Ninja"
        cmake --build build --config ${{ matrix.build-type }} --parallel
        cmake --install build --config ${{ matrix.build-type }}
        if (Test-Path -Path "C:/apr/lib/libapr-2.lib") {
          cp C:/apr/lib/libapr-2.lib C:/apr/lib/apr-1.lib
        }
        if ("${{ matrix.tc_branches }}" -eq "1.3.x.nossl" ) {
            xcopy /q /e /i /y ${{github.workspace}}\apr\include\arch C:\apr\include\arch
        }  
        tree c:\apr /F
        
    - name: Build Openssl static library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      if: false
      run: |
        git clone --depth 1 https://github.com/openssl/openssl.git ${{github.workspace}}\openssl
        cd ${{github.workspace}}\openssl
        mkdir _build
        cd _build
        perl ..\Configure --banner=Configured --prefix=C:\openssl no-makedepend -DOSSL_WINCTX=openssl ${{ matrix.openssl-config }}
        perl configdata.pm --dump
        nmake /S
        nmake install

    - name: Install dependencies
      if: true
      run: vcpkg install --triplet ${{ matrix.triplet }} openssl
      # run: vcpkg install --triplet ${{ matrix.triplet }} apr[private-headers] apr-util pcre2 openssl
      #  -DAPR_INCLUDE_DIR=C:/vcpkg/installed/${{ matrix.triplet }}/include ^
      # "-DAPR_LIBRARIES=C:/vcpkg/installed/${{ matrix.triplet }}/lib/libapr-1.lib;C:/vcpkg/installed/${{ matrix.triplet }}/lib/libaprutil-1.lib"

    - name: download coreinfo
      uses: suisei-cn/actions-download-file@v1.6.0
      with:
        url: "https://download.sysinternals.com/files/Coreinfo.zip"
        target: _build/coreinfo/        

    - name: get cpu info
      working-directory: _build
      continue-on-error: true
      run: |
        7z.exe x coreinfo/Coreinfo.zip
        ./Coreinfo64.exe -accepteula -f
        
    - name: Build tcnative
      shell: cmd
      run: |
        git clone -b ${{matrix.tc_branches}} --depth 1 https://github.com/indiff/tomcat-native.git ${{github.workspace}}\tcnative
        cd ${{github.workspace}}\tcnative\native
        echo %JAVA_HOME_8_X64%
        set JAVA_HOME=%JAVA_HOME_8_X64%
        set WINVER=WIN7
        nmake -f NMAKEMakefile BUILD_CPU=x64 ^
            WITH_APR=c:\apr ^
            WITH_OPENSSL=C:\vcpkg\packages\openssl_${{ matrix.triplet }} ^
            APR_DECLARE_STATIC=1 ^
            APR_HAVE_IPV6=OFF ^
            OPENSSL_NEW_LIBS=0
        cd WIN7_X64_DLL_RELEASE
        rem 7z a -t7z -mx=9 tcnative.7z .\*.dll -r

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
          name: tcnative-windows-${{ matrix.build-type }}-${{ matrix.arch}}-${{matrix.tc_branches}}
          retention-days: 5 # 保留期 
          compression-level: 9 # 压缩级别
          include-hidden-files: true
          path: |
            ${{github.workspace}}/tcnative/native/WIN7_X64_DLL_RELEASE/*.dll


  publish_release:
    name: Publish release
    #if: ${{ !cancelled() && ( github.event_name == 'schedule' || github.event.inputs.doRelease == 'true' ) }}
    needs: [build-in-centos7, build-in-windows] 
    runs-on: ubuntu-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: tcnative-*
          merge-multiple: false
          path: artifacts
      - name: Update Latest
        run: |
          set -xe
          shopt -s nullglob
          sudo timedatectl set-timezone Asia/Shanghai
          timedatectl status
          # repack zip for dir
          cdir="$(pwd)"
          for dir in artifacts/*/; do
            the_dir=`basename "${cdir}/${dir}"`
            if [[ -d "${cdir}/artifacts/${the_dir}" ]]; then
              echo "Directory exists ${the_dir}."
              cd "${cdir}/artifacts/${the_dir}"
              zip -r -q -9 "${cdir}/artifacts/${the_dir}.zip" .
              cd ..
              rm -rf "${the_dir}"
            fi         
          done
          (cd ${cdir}/artifacts && sha256sum *.{zip,tar.xz,7z} > checksums.sha256)
          export build_timestamp="$(date +'%Y%m%d_%H%M')"

          echo -e "> Automated release created by GitHub Actions.\n" > ${{ github.workspace }}/RELEASE.md
          cat <<'EOF' > ${{ github.workspace }}/RELEASE.md
          ```
          # Backup current SSH config
          [[ -f /etc/ssh/sshd_config ]] && mv /etc/ssh/sshd_config /etc/ssh/sshd_config.$(date +%Y%m%d)

          # Install rpm packages. Exclude all debug packages.
          find . ! -name '*debug*' -name '*.rpm' | xargs sudo yum --disablerepo=* localinstall -y --allowerasing

          # fix by packages.
          yum install -y libICE libSM libX11 libXt
          yum update -y
          find . ! -name '*debug*' -name '*.rpm' | xargs sudo yum --disablerepo=* localinstall -y --skip-broken

          # in case host key files got permissions too open.
          chmod -v 600 /etc/ssh/ssh_host_*_key

          # For CentOS7+:
          # in some cases previously installed systemd unit file is left on disk after upgrade.
          # causes systemd mixing unit files and initscripts units provided by this package.
          if [[ -d /run/systemd/system && -f /usr/lib/systemd/system/sshd.service ]]; then
              mv /usr/lib/systemd/system/sshd.service /usr/lib/systemd/system/sshd.service.$(date +%Y%m%d)
              systemctl daemon-reload
          fi

          # Check Installed version:
          ssh -V && /usr/sbin/sshd -V

          # Restart service
          service sshd restart
          ```
          ```
          yum erase openssh-askpass openssh-keycat openssh-cavs openssh-askpass openssh-askpass-gnome openssh-debuginfo
          rpm -ivh --force --nodeps --replacepkgs --replacefiles openssh-*.rpm
          ```
          ```
          cat << 'EOF' > /etc/ssh/sshd_config
          Port 22
          Port 80
          AddressFamily inet
          PubkeyAcceptedAlgorithms +ssh-rsa
          PermitRootLogin yes
          PasswordAuthentication yes
          UseDNS no
          UsePAM yes
          KexAlgorithms -diffie-hellman-group1-sha1,diffie-hellman-group1-sha256,diffie-hellman-group14-sha1,diffie-hellman-group14-sha256,diffie-hellman-group15-sha256,diffie-hellman-group15-sha512,diffie-hellman-group16-sha256,diffie-hellman-group16-sha512,diffie-hellman-group17-sha512,diffie-hellman-group18-sha512,diffie-hellman-group-exchange-sha1,diffie-hellman-group-exchange-sha256,diffie-hellman-group-exchange-sha512
          shitshit
          ```
          EOF
          sed -i 's/shitshit/EOF/g' ${{ github.workspace }}/RELEASE.md

          NAME="${{ needs.before_build.outputs.TC_VERSION1 }}_${{ needs.before_build.outputs.TC_VERSION1 }}_${build_timestamp}"
          TAGNAME="${NAME}"
          # TAGNAME="last"
          checksums=$(cat ${cdir}/artifacts/checksums.sha256)
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          # sleep 15
          git tag -l --format='%(contents)' "${TAGNAME}" | tee -a ${{ github.workspace }}/RELEASE.md
          gh release delete --cleanup-tag --yes "$TAGNAME" || true
          gh release create "$TAGNAME" --target "main" -F ${{ github.workspace }}/RELEASE.md --title "$NAME" ${{ github.workspace }}/artifacts/*

        env:
          GITHUB_TOKEN: ${{ github.token }}