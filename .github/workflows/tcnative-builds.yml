name: Windows

# 调整 action 规则
on:
  push:
    tags: [ "*" ]
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.sh'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.sh'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  build-in-windows:
    strategy:
      matrix:
        os: [windows-latest]
        build-type: [Release]   # Debug, Release
        generator: [ "Visual Studio 17 2022" ]
        arch: [ "Win32", "x64" ] # "Win32", "x64"
        toolset: [ "v143" ]  # "v143", "v142"
        test-static: [ "OFF" ]  # "ON", "OFF"
      fail-fast: false
    
    name: "MSVC ${{ matrix.toolset }} ${{ matrix.arch }} [${{ matrix.build-type }}] test-static=${{ matrix.test-static }} on ${{ matrix.os }}"
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - name: Build Apr static library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        git clone --depth 1 https://github.com/indiff/apr.git ${{github.workspace}}\apr
        cd ${{github.workspace}}\apr
        cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPR_BUILD_SHARED=ON -DAPR_BUILD_STATIC=OFF  -DTEST_STATIC_LIBS=${{ matrix.test-static }} -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -T ${{ matrix.toolset }}
        cmake --build build --config ${{ matrix.build-type }}

    - name: Build Openssl static library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        git clone --depth 1 https://github.com/openssl/openssl.git ${{github.workspace}}\openssl
        cd ${{github.workspace}}\openssl
        perl Configure VC-WIN64A no-shared no-tests no-threads --prefix=C:\openssl-${{ matrix.arch }}
        nmake
        nmake install

        
          