name: Windows

# 调整 action 规则
on:
  push:
    tags: [ "*" ]
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.sh'
  pull_request:
    branches: [ "main" ]
    paths:
      - '**/*.yaml'
      - '**/*.yml'
      - '**/*.sh'
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  
jobs:
  build-in-windows:
    strategy:
      matrix:
        os: [windows-latest]
        build-type: [Release]   # Debug, Release
        generator: [ "Visual Studio 17 2022" ]
        arch: [ "x64" ] # "Win32", "x64"
        toolset: [ "v143" ]  # "v143", "v142"
        test-static: [ "OFF" ]  # "ON", "OFF"
        openssl-config: [ "no-threads no-shared no-tests enable-fips no-thread-pool no-quic" ]
      fail-fast: false
    
    name: "MSVC ${{ matrix.toolset }} ${{ matrix.arch }} [${{ matrix.build-type }}] test-static=${{ matrix.test-static }} on ${{ matrix.os }}"
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ${{ matrix.os }}

    steps:
    - uses: ilammy/msvc-dev-cmd@v1
      with:
        arch: win64
        
    - uses: ilammy/setup-nasm@v1
      with:
        platform: win64
    - name: Build Apr static library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        git clone --depth 1 https://github.com/indiff/apr.git ${{github.workspace}}\apr
        cd ${{github.workspace}}\apr
        # cmake -B build -DCMAKE_INSTALL_PREFIX=c:\apr -DAPR_INSTALL_INCLUDE_DIR=include  -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPR_BUILD_SHARED=ON -DAPR_BUILD_STATIC=ON  -DTEST_STATIC_LIBS=${{ matrix.test-static }} -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -T ${{ matrix.toolset }}
        # call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\Common7\Tools\VsDevCmd.bat" -arch=x64
        # cmake -B build -DCMAKE_INSTALL_PREFIX=c:\apr -DAPR_INSTALL_INCLUDE_DIR=include  -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPU_HAVE_SQLITE3=OFF -DAPU_HAVE_ODBC=OFF -DBUILD_SHARED_LIBS=ON -DAPR_MODULAR_DSO=ON -DAPR_INSTALL_PRIVATE_H=ON -DTEST_STATIC_LIBS=${{ matrix.test-static }} -G "${{ matrix.generator }}" -A ${{ matrix.arch }} -T ${{ matrix.toolset }}
        cmake -B build -DCMAKE_INSTALL_PREFIX=c:\apr -DAPR_INSTALL_INCLUDE_DIR=include  -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} -DAPR_BUILD_TESTAPR=OFF -DAPR_HAVE_IPV6=OFF -DAPU_HAVE_SQLITE3=OFF -DAPU_HAVE_ODBC=OFF -DBUILD_SHARED_LIBS=ON -DAPR_MODULAR_DSO=ON -DAPR_INSTALL_PRIVATE_H=ON -DTEST_STATIC_LIBS=${{ matrix.test-static }} -DVCPKG_TARGET_TRIPLET=x64-window -DCMAKE_TOOLCHAIN_FILE=C:/vcpkg/scripts/buildsystems/vcpkg.cmake -G "Ninja"
        cmake --build build --config ${{ matrix.build-type }}
        cmake --install build --config ${{ matrix.build-type }}
        cp C:/apr/lib/libapr-2.lib C:/apr/lib/apr-1.lib
        tree c:\apr /F



        
    - name: Build Openssl static library
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: |
        git clone --depth 1 https://github.com/openssl/openssl.git ${{github.workspace}}\openssl
        cd ${{github.workspace}}\openssl
        mkdir _build
        cd _build
        perl ..\Configure --banner=Configured --prefix=C:\openssl no-makedepend -DOSSL_WINCTX=openssl ${{ matrix.openssl-config }}
        perl configdata.pm --dump
        nmake /S
        nmake install

    - name: download coreinfo
      uses: suisei-cn/actions-download-file@v1.6.0
      with:
        url: "https://download.sysinternals.com/files/Coreinfo.zip"
        target: _build/coreinfo/        

    - name: get cpu info
      working-directory: _build
      continue-on-error: true
      run: |
        7z.exe x coreinfo/Coreinfo.zip
        ./Coreinfo64.exe -accepteula -f
        
    - name: Build tcnative
      shell: cmd
      run: |
        git clone -b main.nossl --depth 1 https://github.com/indiff/tomcat-native.git ${{github.workspace}}\tcnative
        cd ${{github.workspace}}\tcnative\native
        echo %JAVA_HOME_8_X64%
        set JAVA_HOME=%JAVA_HOME_8_X64%
        set WINVER=WIN7
        nmake -f NMAKEMakefile BUILD_CPU=x64 ^
            WITH_APR=c:\apr ^
            WITH_OPENSSL=c:\openssl ^
            APR_DECLARE_STATIC=1 ^
            APR_HAVE_IPV6=OFF ^
            OPENSSL_NEW_LIBS=0
        cd WIN7_X64_DLL_RELEASE
        #7z a -t7z -mx=9 tcnative.7z .\*.dll -r
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
          name: apr.${{ matrix.build-type }}.${{ matrix.arch}}
          retention-days: 5 # 保留期 
          compression-level: 9 # 压缩级别
          path: |
            ${{github.workspace}}/tcnative/native/WIN7_X64_DLL_RELEASE/*.dll
        